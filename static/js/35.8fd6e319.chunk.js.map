{"version":3,"file":"static/js/35.8fd6e319.chunk.js","mappings":"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","sources":["types.ts","components/common/DropDown.tsx","components/common/Input.tsx","components/filters/Filters.tsx","components/table/Table.tsx","api/config.ts","api/country.ts","pages/Main/useMain.ts","utils.ts","pages/Main/Main.tsx"],"sourcesContent":["export interface IData {\r\n  country: string;\r\n  region: string;\r\n  population: number;\r\n  area: number;\r\n  flag: {\r\n    png: string;\r\n    svg: string;\r\n    alt: string;\r\n  };\r\n}\r\n\r\nexport enum EDropType {\r\n  sortBy = \"Sort by\",\r\n  regions = \"Regions\",\r\n}\r\n","import { useState, FC } from \"react\";\r\nimport { TextField, Typography, Autocomplete } from \"@mui/material\";\r\nimport { EDropType } from \"../../types\";\r\n\r\ninterface Props {\r\n  label: EDropType;\r\n  options: string[];\r\n  size: \"small\" | \"medium\";\r\n  handleSortChange?: (value: string | null) => void;\r\n  handleRegionChange?: (value: string | null) => void;\r\n}\r\n\r\nconst DropDown: FC<Props> = ({\r\n  size,\r\n  label,\r\n  options,\r\n  handleSortChange,\r\n  handleRegionChange,\r\n}) => {\r\n  const [value, setValue] = useState<string | null>(null);\r\n  const [inputValue, setInputValue] = useState(\"\");\r\n\r\n  // TODO: event fixe typification\r\n  const handleValueChange = (_: any, newValue: string | null) => {\r\n    setValue(newValue);\r\n    if (label === EDropType.sortBy && handleSortChange)\r\n      handleSortChange(newValue);\r\n    if (label === EDropType.regions && handleRegionChange)\r\n      handleRegionChange(newValue);\r\n  };\r\n\r\n  return (\r\n    <Typography component=\"div\">\r\n      <Autocomplete\r\n        size={size}\r\n        value={value}\r\n        onChange={handleValueChange}\r\n        inputValue={inputValue}\r\n        onInputChange={(_, newInputValue) => {\r\n          setInputValue(newInputValue);\r\n        }}\r\n        options={options}\r\n        sx={{ width: 300 }}\r\n        renderInput={(params) => <TextField {...params} label={label} />}\r\n      />\r\n    </Typography>\r\n  );\r\n};\r\n\r\nexport default DropDown;\r\n","import { FC, ChangeEvent } from \"react\";\r\nimport { TextField } from \"@mui/material\";\r\n\r\ninterface Props {\r\n  search: string;\r\n  handleInput: (name: string) => void;\r\n}\r\n\r\nconst Input: FC<Props> = ({ search, handleInput }) => {\r\n  const handleSearch = (e: ChangeEvent<HTMLInputElement>) => {\r\n    const value = e?.target?.value;\r\n    handleInput(value);\r\n  };\r\n\r\n  return (\r\n    <TextField\r\n      size=\"medium\"\r\n      label=\"Search\"\r\n      placeholder=\"Search\"\r\n      value={search}\r\n      onChange={handleSearch}\r\n    />\r\n  );\r\n};\r\n\r\nexport default Input;\r\n","import { FC } from \"react\";\r\nimport { Typography } from \"@mui/material\";\r\nimport DropDown from \"../common/DropDown\";\r\nimport { EDropType } from \"../../types\";\r\nimport Input from \"../common/Input\";\r\n\r\ninterface Props {\r\n  search: string;\r\n  handleInput: (name: string) => void;\r\n  handleSortChange: (value: string | null) => void;\r\n  handleRegionChange: (value: string | null) => void;\r\n}\r\n\r\nconst Filters: FC<Props> = ({\r\n  search,\r\n  handleInput,\r\n  handleSortChange,\r\n  handleRegionChange,\r\n}) => {\r\n  const regionOptions = [\r\n    \"Africa\",\r\n    \"Europe\",\r\n    \"Asia\",\r\n    \"Oceania\",\r\n    \"Australia\",\r\n    \"North America\",\r\n    \"South America\",\r\n  ];\r\n  const sortOptions = [\"Population\", \"Area\"];\r\n\r\n  return (\r\n    <Typography component=\"div\">\r\n      <Typography component=\"div\" variant=\"h5\" sx={{ fontWeight: \"bold\" }}>\r\n        Filter\r\n      </Typography>\r\n\r\n      <Typography\r\n        component=\"div\"\r\n        sx={{\r\n          display: \"flex\",\r\n          alignItems: \"center\",\r\n          justifyContent: \"space-between\",\r\n        }}\r\n      >\r\n        <Typography component=\"div\" sx={{ display: \"flex\", gap: \"20px\" }}>\r\n          <Input search={search} handleInput={handleInput} />\r\n          <DropDown\r\n            size=\"medium\"\r\n            options={regionOptions}\r\n            label={EDropType.regions}\r\n            handleRegionChange={handleRegionChange}\r\n          />\r\n        </Typography>\r\n\r\n        <DropDown\r\n          size=\"small\"\r\n          options={sortOptions}\r\n          label={EDropType.sortBy}\r\n          handleSortChange={handleSortChange}\r\n        />\r\n      </Typography>\r\n    </Typography>\r\n  );\r\n};\r\n\r\nexport default Filters;\r\n","import { FC } from \"react\";\r\nimport {\r\n  Paper,\r\n  TableRow,\r\n  TableBody,\r\n  TableCell,\r\n  TableHead,\r\n  Typography,\r\n  IconButton,\r\n  TableContainer,\r\n  Table as TableM,\r\n} from \"@mui/material\";\r\nimport { CloseOutlined } from \"@mui/icons-material\";\r\nimport { IData } from \"../../types\";\r\n\r\ninterface Props {\r\n  countries: IData[] | [];\r\n  handleDeleteCountry: (name: string) => void;\r\n}\r\n\r\nconst Table: FC<Props> = ({ countries, handleDeleteCountry }) => {\r\n  const headers: string[] = [\r\n    \"country\",\r\n    \"region\",\r\n    \"population(2023)\",\r\n    \"area\",\r\n    \"flag\",\r\n    \"icon\",\r\n  ];\r\n\r\n  return (\r\n    <Typography component=\"div\">\r\n      <TableContainer component={Paper}>\r\n        <TableM sx={{ minWidth: 650 }}>\r\n          <TableHead sx={{ background: \"lightgrey\" }}>\r\n            <TableRow>\r\n              {headers?.map((item) => {\r\n                return (\r\n                  <TableCell key={item}>\r\n                    <Typography\r\n                      component=\"span\"\r\n                      sx={{ visibility: item === \"icon\" ? \"hidden\" : \"\" }}\r\n                    >\r\n                      {item?.toUpperCase()}\r\n                    </Typography>\r\n                  </TableCell>\r\n                );\r\n              })}\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {countries?.map((row: IData) => (\r\n              <TableRow key={row?.country}>\r\n                <TableCell component=\"th\" scope=\"row\">\r\n                  <Typography component=\"span\" sx={{ fontWeight: 600 }}>\r\n                    {row?.country}\r\n                  </Typography>\r\n                </TableCell>\r\n                <TableCell>{row?.region}</TableCell>\r\n                <TableCell>{row?.population}</TableCell>\r\n                <TableCell>{row?.area}</TableCell>\r\n                <TableCell>\r\n                  <Typography\r\n                    width=\"40px\"\r\n                    component=\"img\"\r\n                    src={row?.flag?.svg}\r\n                    alt={row?.flag?.alt}\r\n                  />\r\n                </TableCell>\r\n                <TableCell\r\n                  align=\"right\"\r\n                  sx={{ width: \"73px\", border: \"1px solid lightgrey\" }}\r\n                >\r\n                  <IconButton\r\n                    sx={{ background: \"lightgrey\" }}\r\n                    onClick={() => handleDeleteCountry(row?.country)}\r\n                  >\r\n                    <CloseOutlined />\r\n                  </IconButton>\r\n                </TableCell>\r\n              </TableRow>\r\n            ))}\r\n          </TableBody>\r\n        </TableM>\r\n      </TableContainer>\r\n    </Typography>\r\n  );\r\n};\r\n\r\nexport default Table;\r\n","import axios, {\r\n  AxiosError,\r\n  AxiosResponse,\r\n  InternalAxiosRequestConfig,\r\n} from \"axios\";\r\nimport { store } from \"../store/store\";\r\nimport { setLoading } from \"../store/features/main/mainSlice\";\r\n\r\nexport const base =\r\n  // TODO: should be in env file\r\n  process.env.REACT_APP_API_BASE_URL || \"https://restcountries.com/v3.1/\";\r\n\r\nexport const publicApi = axios.create({ baseURL: base });\r\n\r\nexport const errorHandler = (error: AxiosError | Error) => {\r\n  store.dispatch(setLoading(false));\r\n\r\n  // TODO: handle errors\r\n  console.log(error.message);\r\n};\r\n\r\npublicApi.interceptors.request.use((request: InternalAxiosRequestConfig) => {\r\n  store.dispatch(setLoading(true));\r\n  return request;\r\n}, errorHandler);\r\n\r\npublicApi.interceptors.response.use((response: AxiosResponse) => {\r\n  store.dispatch(setLoading(false));\r\n  return response;\r\n}, errorHandler);\r\n","import { publicApi } from \"./config\";\r\n\r\nexport const getAllCountries = async () => {\r\n  // NOTE: api does not provide 'limit' property\r\n  const response = await publicApi.get(\"all\");\r\n  return response?.data;\r\n};\r\n","import { useEffect, useState } from \"react\";\r\nimport { IData } from \"../../types\";\r\nimport { formatResponseData } from \"../../utils\";\r\nimport { getAllCountries } from \"../../api/country\";\r\n\r\nconst useMain = () => {\r\n  const [search, setSearch] = useState(\"\");\r\n  const [sortingField, setSortingField] = useState<string>(\"\");\r\n  const [countries, setCountries] = useState<IData[] | []>([]);\r\n  const [selectedCountry, setSelectedCountry] = useState<string>(\"\");\r\n\r\n  const handleDeleteCountry = (name: string) => {\r\n    const newCountries = countries.filter((item) => item?.country !== name);\r\n    setCountries(newCountries);\r\n  };\r\n\r\n  const handleRegionChange = (value: string | null) => {\r\n    const country = value?.toLowerCase() || \"\";\r\n    setSelectedCountry(country);\r\n  };\r\n\r\n  const handleSortChange = (value: string | null) => {\r\n    const field = value?.toLowerCase() || \"\";\r\n    setSortingField(field);\r\n  };\r\n\r\n  // TODO: handle with a delay (debounce function)\r\n  const handleInput = (name: string) => {\r\n    const value = !search.length ? name.trim() : name;\r\n    setSearch(value);\r\n  };\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      const response = await getAllCountries();\r\n      const formattedData = formatResponseData(response?.slice(0, 40));\r\n      setCountries((prevData) => formattedData);\r\n    })();\r\n  }, []);\r\n\r\n  const finalData = [...countries]\r\n    .sort(\r\n      (a: IData, b: IData) =>\r\n        +a[sortingField as keyof IData] - +b[sortingField as keyof IData]\r\n    )\r\n    .filter((item) => {\r\n      return (\r\n        item?.region?.toLowerCase()?.includes(selectedCountry?.toLowerCase()) &&\r\n        item?.country?.toLowerCase()?.includes(search?.toLowerCase())\r\n      );\r\n    });\r\n\r\n  return {\r\n    search,\r\n    finalData,\r\n    sortingField,\r\n    handleInput,\r\n    handleSortChange,\r\n    handleRegionChange,\r\n    handleDeleteCountry,\r\n  };\r\n};\r\n\r\nexport default useMain;\r\n","// TODO: fixe typification\r\nexport function formatResponseData<T>(res: T[]) {\r\n  if (!res?.length) return [];\r\n\r\n  const data = res?.map((item: any) => {\r\n    return {\r\n      country: item?.name?.common,\r\n      region: item?.region,\r\n      population: item?.population,\r\n      area: item?.area,\r\n      flag: item?.flags,\r\n    };\r\n  });\r\n\r\n  return data;\r\n}\r\n","import { Typography } from \"@mui/material\";\r\nimport Filters from \"./../../components/filters\";\r\nimport Table from \"../../components/table\";\r\nimport useMain from \"./useMain\";\r\n\r\nconst Main = () => {\r\n  const {\r\n    search,\r\n    finalData,\r\n    handleInput,\r\n    handleSortChange,\r\n    handleRegionChange,\r\n    handleDeleteCountry,\r\n  } = useMain();\r\n\r\n  return (\r\n    <Typography\r\n      component=\"div\"\r\n      sx={{\r\n        gap: \"30px\",\r\n        width: \"80%\",\r\n        display: \"flex\",\r\n        margin: \"0 auto\",\r\n        padding: \"20px 0\",\r\n        minWidth: \"1200px\",\r\n        flexDirection: \"column\",\r\n      }}\r\n    >\r\n      <Filters\r\n        search={search}\r\n        handleInput={handleInput}\r\n        handleSortChange={handleSortChange}\r\n        handleRegionChange={handleRegionChange}\r\n      />\r\n      <Table countries={finalData} handleDeleteCountry={handleDeleteCountry} />\r\n    </Typography>\r\n  );\r\n};\r\n\r\nexport default Main;\r\n"],"names":["EDropType","_ref","size","label","options","handleSortChange","handleRegionChange","_useState","useState","_useState2","_slicedToArray","value","setValue","_useState3","_useState4","inputValue","setInputValue","_jsx","Typography","component","children","Autocomplete","onChange","_","newValue","sortBy","regions","onInputChange","newInputValue","sx","width","renderInput","params","TextField","_objectSpread","search","handleInput","placeholder","e","_e$target","target","_jsxs","variant","fontWeight","display","alignItems","justifyContent","gap","Input","DropDown","countries","handleDeleteCountry","headers","TableContainer","Paper","TableM","minWidth","TableHead","background","TableRow","map","item","TableCell","visibility","toUpperCase","TableBody","row","_row$flag","_row$flag2","scope","country","region","population","area","src","flag","svg","alt","align","border","IconButton","onClick","CloseOutlined","base","process","REACT_APP_API_BASE_URL","publicApi","axios","baseURL","errorHandler","error","store","setLoading","console","log","message","interceptors","request","use","response","getAllCountries","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","get","sent","abrupt","data","stop","apply","arguments","setSearch","sortingField","setSortingField","_useState5","_useState6","setCountries","_useState7","_useState8","selectedCountry","setSelectedCountry","useEffect","formattedData","res","slice","length","_item$name","name","common","flags","prevData","finalData","_toConsumableArray","sort","a","b","filter","_item$region","_item$region$toLowerC","_item$country","_item$country$toLower","toLowerCase","includes","trim","field","newCountries","_useMain","useMain","margin","padding","flexDirection","Filters","Table"],"sourceRoot":""}